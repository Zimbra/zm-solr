<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--  
 This is the Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default) 
 or located where the classloader for the Solr webapp can find it.

 This example schema is the recommended starting point for users.
 It should be kept correct and concise, usable out-of-the-box.

 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml

 PERFORMANCE NOTE: this schema includes many optional features and should not
 be used for benchmarking.  To improve performance one could
  - set stored="false" for all fields possible (esp large fields) when you
    only need to search on the field but don't need to return the original
    value.
  - set indexed="false" if you don't need to search on the field, but only
    return the field as a result of searching on other indexed fields.
  - remove all unneeded copyField statements
  - for best index size and searching performance, set "index" to false
    for all general text fields, use copyField to copy them to the
    catchall "text" field, and use that for searching.
  - For maximum indexing performance, use the ConcurrentUpdateSolrServer
    java client.
  - Remember to run the JVM in server mode, and use a higher logging level
    that avoids logging every request
-->

<schema name="zimbra" version="1.6">
    <!-- attribute "name" is the name of this schema and is only used for display purposes.
       version="x.y" is Solr's version number for the schema syntax and 
       semantics.  It should not normally be changed by applications.

       1.0: multiValued attribute did not exist, all fields are multiValued 
            by nature
       1.1: multiValued attribute introduced, false by default 
       1.2: omitTermFreqAndPositions attribute introduced, true by default 
            except for text fields.
       1.3: removed optional field compress feature
       1.4: autoGeneratePhraseQueries attribute introduced to drive QueryParser
            behavior when a single string produces multiple tokens.  Defaults 
            to off for version >= 1.4
       1.5: omitNorms defaults to true for primitive field types 
            (int, float, boolean, string...)
       1.6: useDocValuesAsStored defaults to true.
    -->

    <!-- Valid attributes for fields:
     name: mandatory - the name for the field
     type: mandatory - the name of a field type from the 
       fieldTypes section
     indexed: true if this field should be indexed (searchable or sortable)
     stored: true if this field should be retrievable
     docValues: true if this field should have doc values. Doc values are
       useful (required, if you are using *Point fields) for faceting, 
       grouping, sorting and function queries. Doc values will make the index 
       faster to load, more NRT-friendly and more memory-efficient. 
       They however come with some limitations: they are currently only 
       supported by StrField, UUIDField, all Trie*Fields and *PointFields,
       and depending on the field type, they might require the field to be
       single-valued, be required or have a default value (check the
       documentation of the field type you're interested in for more information)
     multiValued: true if this field may contain multiple values per document
     omitNorms: (expert) set to true to omit the norms associated with
       this field (this disables length normalization and index-time
       boosting for the field, and saves some memory).  Only full-text
       fields or fields that need an index-time boost need norms.
       Norms are omitted for primitive (non-analyzed) types by default.
     termVectors: [false] set to true to store the term vector for a
       given field.
       When using MoreLikeThis, fields used for similarity should be
       stored for best performance.
     termPositions: Store position information with the term vector.  
       This will increase storage costs.
     termOffsets: Store offset information with the term vector. This 
       will increase storage costs.
     required: The field is required.  It will throw an error if the
       value does not exist
     default: a value that should be used if no value is specified
       when adding a document.
    -->

    <!-- field names should consist of alphanumeric or underscore characters only and
      not start with a digit.  This is not currently strictly enforced,
      but other field names will not have first class support from all components
      and back compatibility is not guaranteed.  Names with both leading and
      trailing underscores (e.g. _version_) are reserved.
    -->

    <!-- In this data_driven_schema_configs configset, only three fields are pre-declared: 
         id, _version_, and _text_.  All other fields will be type guessed and added via the
         "add-unknown-fields-to-the-schema" update request processor chain declared 
         in solrconfig.xml.
         
         Note that many dynamic fields are also defined - you can use them to specify a 
         field's type via field naming conventions - see below.
  
         WARNING: The _text_ catch-all field will significantly increase your index size.
         If you don't need it, consider removing it and the corresponding copyField directive.
    -->
    <!--field name="id" type="string" indexed="true" stored="true" required="true" multiValued="false" /> -->
    <!-- doc values are enabled by default for primitive types such as long so we don't index the version field  -->
    <field name="_version_" type="long" indexed="false" stored="false"/>
    <field name="_root_" type="string" indexed="true" stored="false" docValues="false" />

    <field name="solrId" type="string" indexed="true" stored="true" required="true" />
    <field name="l.mbox_blob_id" type="int" indexed="true" stored="true"  multiValued="false" />
    <field name="l.version" type="string" indexed="true" stored="true" />
    <field name="has" type="zmtext_nr" indexed="true" stored="false"/>
    <field name="l.contactData" type="zmcontact" indexed="true" stored="false"/>
    <field name="l.date" type="zmdate" indexed="true" stored="true"/>
    <field name="attachment" type="zmmimetype" indexed="true" stored="true" multiValued="true" />
    <field name="l.content" type="zmtext" indexed="true" stored="false" multiValued="true"/>
    <field name="subjSort" type="string" indexed="true" stored="false"/>
    <field name="subject" type="zmtext" indexed="true" stored="false" omitNorms="true" termVectors="true"/>
    <field name="nameSort" type="string" indexed="true" stored="false"/>
    <field name="l.field" type="zmheaders" indexed="true" stored="true" multiValued="true"/>
    <field name="msg_id" type="zmid" indexed="true" stored="false"/>
    <field name="env_to" type="zmaddress" indexed="true" stored="true" />
    <field name="env_from" type="zmaddress" indexed="true" stored="true"/>
    <field name="cc" type="zmaddress" indexed="true" stored="true" />
    <field name="to" type="zmaddress" indexed="true" stored="true" />
    <field name="from" type="zmaddress" indexed="true" stored="true" />
    <field name="cc_sw" type="zmaddress_sw" indexed="true" stored="true" />
    <field name="to_sw" type="zmaddress_sw" indexed="true" stored="true" />
    <field name="from_sw" type="zmaddress_sw" indexed="true" stored="true" />
    <field name="sender_sw" type="zmaddress_sw" indexed="true" stored="true" />
    <field name="priority" type="string" indexed="true" stored="true" omitNorms="true"/>
    <field name="hasFlag" type="int" indexed="true" stored="true" omitNorms="true"/>
    <field name="hasAttach" type="int" indexed="true" stored="true" omitNorms="true"/>
    <field name="l.size" type="zmnumber" indexed="true" stored="true" />
    <field name="filename" type="zmfilename" indexed="true" stored="true" />
    <field name="filename_sw" type="zmfilename_sw" indexed="true" stored="true" />
    <field name="l.partname" type="string" indexed="true" stored="true" />
    <field name="type" type="zmmimetype" indexed="true" stored="true" />
    <field name="author" type="zmtext" indexed="true" stored="false"/>
    <field name="company" type="zmtext" indexed="true" stored="false"/>
    <field name="keywords" type="zmtext" indexed="true" stored="false"/>
    <field name="title" type="zmtext" indexed="true" stored="false"/>

    <!-- Only enabled in the "schemaless" data-driven example (assuming the client
         does not know what fields may be searched) because it's very expensive to index everything twice. -->
    <!-- <copyField source="*" dest="_text_"/> -->

    <!-- Dynamic field definitions allow using convention over configuration
       for fields via the specification of patterns to match field names. 
       EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
       RESTRICTION: the glob-like pattern in the name attribute must have
       a "*" only at the start or the end.  -->

    <!-- uncomment the following to ignore any fields that don't already match an existing 
        field name or dynamic field, rather than reporting them as an error. 
        alternately, change the type="ignored" to some other type e.g. "text" if you want 
        unknown fields indexed and/or stored by default 
        
        NB: use of "*" dynamic fields will disable field type guessing and adding
        unknown fields to the schema. --> 
    <!--dynamicField name="*" type="ignored" multiValued="true" /-->

    <!-- Field to use to determine and enforce document uniqueness.
      Unless this field is marked with required="false", it will be a required field   -->   
    <uniqueKey>solrId</uniqueKey>
 
    <!-- copyField commands copy one field to another at the time a document
       is added to the index.  It's used either to index the same field differently,
       or to add multiple fields to the same field for easier/faster searching.

    <copyField source="sourceFieldName" dest="destinationFieldName"/>
    -->
    <copyField source="from" dest="from_sw"/>
    <copyField source="to" dest="to_sw"/>
    <copyField source="cc" dest="cc_sw"/>
    <copyField source="sender" dest="sender_sw"/>
    <copyField source="filename" dest="filename_sw"/>
    <!-- field type definitions. The "name" attribute is
       just a label to be used by field definitions.  The "class"
       attribute and any other attributes determine the real
       behavior of the fieldType.
         Class names starting with "solr" refer to java classes in a
       standard package such as org.apache.solr.analysis
    -->

    <fieldType name="zimbrastandard" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
            <tokenizer class="solr.WhitespaceTokenizerFactory"/>
            <filter class="solr.CJKWidthFilterFactory"/>
        <!-- Removes common tokens typically not useful for search, but have a negative effect on ranking -->
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_ja.txt" />
        <!-- Normalizes common katakana spelling variations by removing any last long sound character (U+30FC) -->
        <filter class="solr.JapaneseKatakanaStemFilterFactory" minimumLength="4"/>
            <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>
    <fieldType name="zmaddress" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
      <analyzer type="index">
            <tokenizer class="com.zimbra.solr.ZimbraAddressTokenizerFactory"/>
            <filter class="solr.ReversedWildcardFilterFactory" withOriginal="true"
           maxPosAsterisk="3" maxPosQuestion="2" />
      </analyzer>
      <analyzer type="query">
            <tokenizer class="com.zimbra.solr.ZimbraAddressTokenizerFactory"/>
      </analyzer>
    </fieldType>
    <fieldType name="zmaddress_sw" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
      <analyzer type="index">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-halfwidth-kana-voiced.txt"/>
            <tokenizer class="com.zimbra.solr.ZimbraAddressTokenizerFactory"/>
            <filter class="solr.StopFilterFactory"/>
            <filter class="solr.ReversedWildcardFilterFactory" withOriginal="true"
           maxPosAsterisk="3" maxPosQuestion="2" />
      </analyzer>
      <analyzer type="query">
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-halfwidth-kana-voiced.txt"/>
            <tokenizer class="com.zimbra.solr.ZimbraAddressTokenizerFactory"/>
            <filter class="solr.StopFilterFactory"/>
      </analyzer>
    </fieldType>
    <fieldType name="zmtext" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
      <analyzer type="index">
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-halfwidth-kana-voiced.txt"/>
        <charFilter class="com.zimbra.solr.ZimbraCharFilterFactory"/>
        <tokenizer class="com.zimbra.solr.ZimbraStandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory"/>
        <filter class="com.zimbra.solr.ZimbraClassicTokenFilterFactory"/>
        <filter class="solr.ReversedWildcardFilterFactory" withOriginal="true"
           maxPosAsterisk="3" maxPosQuestion="2" />
      </analyzer>
      <analyzer type="query">
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-halfwidth-kana-voiced.txt"/>
        <charFilter class="com.zimbra.solr.ZimbraCharFilterFactory"/>
        <tokenizer class="com.zimbra.solr.ZimbraStandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory"/>
        <filter class="com.zimbra.solr.ZimbraClassicTokenFilterFactory"/>
      </analyzer>
    </fieldType>
    <fieldType name="zmtext_nr" class="solr.TextField" positionIncrementGap="100" autoGeneratePhraseQueries="true">
      <analyzer type="index">
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-halfwidth-kana-voiced.txt"/>
        <charFilter class="com.zimbra.solr.ZimbraCharFilterFactory"/>
        <tokenizer class="com.zimbra.solr.ZimbraStandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory"/>
        <filter class="com.zimbra.solr.ZimbraClassicTokenFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-halfwidth-kana-voiced.txt"/>
        <charFilter class="com.zimbra.solr.ZimbraCharFilterFactory"/>
        <tokenizer class="com.zimbra.solr.ZimbraStandardTokenizerFactory"/>
        <filter class="solr.StopFilterFactory"/>
        <filter class="com.zimbra.solr.ZimbraClassicTokenFilterFactory"/>
      </analyzer>
    </fieldType>
    <fieldType name="zmheaders" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
            <tokenizer class="com.zimbra.solr.ZimbraFieldTokenizerFactory"/>
      </analyzer>
    </fieldType>
    <fieldType name="zmcontact" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
            <charFilter class="solr.MappingCharFilterFactory" mapping="mapping-halfwidth-kana-voiced.txt"/>
            <tokenizer class="com.zimbra.solr.ZimbraAddrCharTokenizerFactory"/>
            <filter class="com.zimbra.solr.ZimbraContactTokenFilterFactory"/>
      </analyzer>
    </fieldType>
    <fieldType name="zmfilename" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
            <tokenizer class="solr.PatternTokenizerFactory" pattern="[,\s\r\n\.]"/>
            <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>
    <fieldType name="zmfilename_sw" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
            <tokenizer class="solr.PatternTokenizerFactory" pattern="[,\s\r\n\.]"/>
            <filter class="solr.LowerCaseFilterFactory"/>
            <filter class="solr.StopFilterFactory"/>
      </analyzer>
    </fieldType>
    <fieldType name="zmmimetype" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
            <tokenizer class="com.zimbra.solr.ZimbraMimeTypeTokenizerFactory"/>
      </analyzer>
    </fieldType>
    <fieldType name="zmnumber" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
            <charFilter class="solr.PatternReplaceCharFilterFactory" pattern="," replacement=""/>
            <tokenizer class="solr.PatternTokenizerFactory" pattern="\d+" group="0"/>
      </analyzer>
    </fieldType>
    <fieldType name="zmid" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
            <tokenizer class="solr.KeywordTokenizerFactory"/>
      </analyzer>
    </fieldType>
    <fieldType name="zmdate" class="solr.TextField" positionIncrementGap="100">
      <analyzer>
            <tokenizer class="solr.KeywordTokenizerFactory"/>
            <filter class="com.zimbra.solr.ZimbraTimeFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- Similarity is the scoring routine for each document vs. a query.
       A custom Similarity or SimilarityFactory may be specified here, but 
       the default is fine for most applications.  
       For more info: http://wiki.apache.org/solr/SchemaXml#Similarity
    -->
    <!--
     <similarity class="com.example.solr.CustomSimilarityFactory">
       <str name="paramkey">param value</str>
     </similarity>
    -->

</schema>
